fork() in C

is used for creating a new process, which is called child process, which runs concurrently with the process that makes the fork() call (parent process).
After a new child process is created, both processes will execute the next instruction following the fork() system call.
A child process uses the same pc(program counter), same CPU registers, same open files which use in the parent process.

returns value : 

Negative Value: creation of a child process was unsuccessful.
Zero: Returned to the newly created child process.
Positive value: Returned to parent or caller. The value contains process ID of newly created child process.



exemple : 

    fork();
  
    printf("Hello world!\n");

    Output:

    Hello world!
    Hello world!


    fork();
    fork();
    fork();
    printf("hello\n");

    Output:

    hello
    hello
    hello
    hello
    hello
    hello
    hello
    hello




    if (fork() == 0)
        printf("Hello from Child!\n");
    else
        printf("Hello from Parent!\n");

    Output:

    1.
    Hello from Child!
    Hello from Parent!
        (or)
    2.
    Hello from Parent!
    Hello from Child!

In the above code, a child process is created. fork() returns 0 in the child process and positive integer in the parent process.
Here, two outputs are possible because the parent process and child process are running concurrently. So we donâ€™t know whether the OS will first give control to the parent process or the child process.

Parent process and child process are running the same program, but it does not mean they are identical. OS allocate different data and states for these two processes
